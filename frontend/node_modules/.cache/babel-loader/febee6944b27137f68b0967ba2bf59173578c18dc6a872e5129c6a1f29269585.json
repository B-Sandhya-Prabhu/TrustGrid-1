{"ast":null,"code":"var _jsxFileName = \"D:\\\\major_poject\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport CharityPlatform from './contracts/CharityPlatform.json';\n\n// Update this address with the one from your deployment\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState('');\n  const [contract, setContract] = useState(null);\n  const [campaigns, setCampaigns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [txStatus, setTxStatus] = useState('');\n  useEffect(() => {\n    const init = async () => {\n      if (window.ethereum) {\n        try {\n          // Check if we're on the correct network\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          const network = await provider.getNetwork();\n          if (network.chainId !== 1337) {\n            setError(\"Please connect to the local Hardhat network (Chain ID: 1337)\");\n            return;\n          }\n\n          // Request account access\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          setAccount(accounts[0]);\n\n          // Create contract instance\n          const signer = provider.getSigner();\n          const contractInstance = new ethers.Contract(contractAddress, CharityPlatform.abi, signer);\n\n          // Verify contract is deployed\n          try {\n            await contractInstance.campaignCount();\n            setContract(contractInstance);\n            await loadCampaigns(contractInstance);\n          } catch (error) {\n            console.error(\"Contract verification failed:\", error);\n            setError(\"Contract not deployed or wrong address. Please deploy the contract first.\");\n          }\n        } catch (error) {\n          console.error(\"Error initializing:\", error);\n          setError(\"Failed to connect to MetaMask. Please make sure MetaMask is installed and connected to the correct network.\");\n        }\n      } else {\n        setError(\"Please install MetaMask to use this application.\");\n      }\n      setLoading(false);\n    };\n    init();\n  }, []);\n  const loadCampaigns = async contractInstance => {\n    try {\n      const campaignCount = await contractInstance.campaignCount();\n      const loadedCampaigns = [];\n      for (let i = 1; i <= campaignCount; i++) {\n        const campaign = await contractInstance.getCampaign(i);\n        loadedCampaigns.push({\n          id: campaign.id.toString(),\n          title: campaign.title,\n          description: campaign.description,\n          beneficiary: campaign.beneficiary,\n          goal: ethers.utils.formatEther(campaign.goal),\n          raised: ethers.utils.formatEther(campaign.raised),\n          deadline: new Date(campaign.deadline.toNumber() * 1000).toLocaleDateString(),\n          active: campaign.active\n        });\n      }\n      setCampaigns(loadedCampaigns);\n    } catch (error) {\n      console.error(\"Error loading campaigns:\", error);\n      setError(\"Failed to load campaigns. Please make sure you're connected to the correct network.\");\n    }\n  };\n  const createCampaign = async event => {\n    event.preventDefault();\n    setError('');\n    setTxStatus('Creating campaign...');\n    try {\n      const formData = new FormData(event.target);\n      const title = formData.get('title');\n      const description = formData.get('description');\n      const beneficiary = formData.get('beneficiary');\n      const goal = formData.get('goal');\n      const duration = formData.get('duration');\n\n      // Validate inputs\n      if (!ethers.utils.isAddress(beneficiary)) {\n        throw new Error('Invalid beneficiary address');\n      }\n      if (isNaN(goal) || parseFloat(goal) <= 0) {\n        throw new Error('Goal amount must be greater than 0');\n      }\n      if (isNaN(duration) || parseInt(duration) <= 0) {\n        throw new Error('Duration must be greater than 0');\n      }\n\n      // Check if contract is properly connected\n      if (!contract) {\n        throw new Error('Contract not connected. Please refresh the page.');\n      }\n      console.log('Creating campaign with:', {\n        title,\n        description,\n        beneficiary,\n        goal: ethers.utils.parseEther(goal),\n        duration: parseInt(duration)\n      });\n      const tx = await contract.createCampaign(title, description, beneficiary, ethers.utils.parseEther(goal), parseInt(duration));\n      setTxStatus('Waiting for transaction confirmation...');\n      const receipt = await tx.wait();\n      console.log('Transaction receipt:', receipt);\n      setTxStatus('Campaign created successfully!');\n      await loadCampaigns(contract);\n      event.target.reset();\n    } catch (error) {\n      console.error(\"Error creating campaign:\", error);\n      let errorMessage = \"Failed to create campaign. \";\n      if (error.code === 'INSUFFICIENT_FUNDS') {\n        errorMessage += \"You don't have enough ETH to cover the gas fees.\";\n      } else if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {\n        errorMessage += \"Gas estimation failed. Please try again.\";\n      } else if (error.message) {\n        errorMessage += error.message;\n      }\n      setError(errorMessage);\n      setTxStatus('');\n    }\n  };\n  const donate = async (campaignId, amount) => {\n    try {\n      const tx = await contract.donate(campaignId, {\n        value: ethers.utils.parseEther(amount)\n      });\n      await tx.wait();\n      await loadCampaigns(contract);\n    } catch (error) {\n      console.error(\"Error making donation:\", error);\n      setError(\"Failed to make donation. Please try again.\");\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Blockchain Charity Platform\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connected Account: \", account || 'Not Connected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 19\n      }, this), txStatus && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status\",\n        children: txStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create New Campaign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: createCampaign,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"title\",\n          placeholder: \"Campaign Title\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"description\",\n          placeholder: \"Campaign Description\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"beneficiary\",\n          placeholder: \"Beneficiary Address\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"goal\",\n          placeholder: \"Goal Amount (ETH)\",\n          step: \"0.01\",\n          min: \"0.01\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"duration\",\n          placeholder: \"Duration (days)\",\n          min: \"1\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Campaign\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Active Campaigns\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"campaigns-grid\",\n        children: campaigns.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No campaigns found. Create one to get started!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this) : campaigns.map(campaign => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"campaign-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: campaign.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: campaign.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Goal: \", campaign.goal, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Raised: \", campaign.raised, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Deadline: \", campaign.deadline]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Status: \", campaign.active ? 'Active' : 'Completed']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this), campaign.active && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Amount (ETH)\",\n              id: `donation-${campaign.id}`,\n              step: \"0.01\",\n              min: \"0.01\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => donate(campaign.id, document.getElementById(`donation-${campaign.id}`).value),\n              children: \"Donate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 19\n          }, this)]\n        }, campaign.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xDr7hFP4+IicVDwCG/rpeBkdfkE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","CharityPlatform","jsxDEV","_jsxDEV","contractAddress","App","_s","account","setAccount","contract","setContract","campaigns","setCampaigns","loading","setLoading","error","setError","txStatus","setTxStatus","init","window","ethereum","provider","providers","Web3Provider","network","getNetwork","chainId","accounts","request","method","signer","getSigner","contractInstance","Contract","abi","campaignCount","loadCampaigns","console","loadedCampaigns","i","campaign","getCampaign","push","id","toString","title","description","beneficiary","goal","utils","formatEther","raised","deadline","Date","toNumber","toLocaleDateString","active","createCampaign","event","preventDefault","formData","FormData","target","get","duration","isAddress","Error","isNaN","parseFloat","parseInt","log","parseEther","tx","receipt","wait","reset","errorMessage","code","message","donate","campaignId","amount","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","placeholder","required","step","min","length","map","onClick","document","getElementById","_c","$RefreshReg$"],"sources":["D:/major_poject/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport CharityPlatform from './contracts/CharityPlatform.json';\r\n\r\n// Update this address with the one from your deployment\r\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\r\n\r\nfunction App() {\r\n  const [account, setAccount] = useState('');\r\n  const [contract, setContract] = useState(null);\r\n  const [campaigns, setCampaigns] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [txStatus, setTxStatus] = useState('');\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      if (window.ethereum) {\r\n        try {\r\n          // Check if we're on the correct network\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const network = await provider.getNetwork();\r\n          \r\n          if (network.chainId !== 1337) {\r\n            setError(\"Please connect to the local Hardhat network (Chain ID: 1337)\");\r\n            return;\r\n          }\r\n\r\n          // Request account access\r\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          setAccount(accounts[0]);\r\n\r\n          // Create contract instance\r\n          const signer = provider.getSigner();\r\n          const contractInstance = new ethers.Contract(contractAddress, CharityPlatform.abi, signer);\r\n          \r\n          // Verify contract is deployed\r\n          try {\r\n            await contractInstance.campaignCount();\r\n            setContract(contractInstance);\r\n            await loadCampaigns(contractInstance);\r\n          } catch (error) {\r\n            console.error(\"Contract verification failed:\", error);\r\n            setError(\"Contract not deployed or wrong address. Please deploy the contract first.\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error initializing:\", error);\r\n          setError(\"Failed to connect to MetaMask. Please make sure MetaMask is installed and connected to the correct network.\");\r\n        }\r\n      } else {\r\n        setError(\"Please install MetaMask to use this application.\");\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    init();\r\n  }, []);\r\n\r\n  const loadCampaigns = async (contractInstance) => {\r\n    try {\r\n      const campaignCount = await contractInstance.campaignCount();\r\n      const loadedCampaigns = [];\r\n\r\n      for (let i = 1; i <= campaignCount; i++) {\r\n        const campaign = await contractInstance.getCampaign(i);\r\n        loadedCampaigns.push({\r\n          id: campaign.id.toString(),\r\n          title: campaign.title,\r\n          description: campaign.description,\r\n          beneficiary: campaign.beneficiary,\r\n          goal: ethers.utils.formatEther(campaign.goal),\r\n          raised: ethers.utils.formatEther(campaign.raised),\r\n          deadline: new Date(campaign.deadline.toNumber() * 1000).toLocaleDateString(),\r\n          active: campaign.active\r\n        });\r\n      }\r\n\r\n      setCampaigns(loadedCampaigns);\r\n    } catch (error) {\r\n      console.error(\"Error loading campaigns:\", error);\r\n      setError(\"Failed to load campaigns. Please make sure you're connected to the correct network.\");\r\n    }\r\n  };\r\n\r\n  const createCampaign = async (event) => {\r\n    event.preventDefault();\r\n    setError('');\r\n    setTxStatus('Creating campaign...');\r\n    \r\n    try {\r\n      const formData = new FormData(event.target);\r\n      const title = formData.get('title');\r\n      const description = formData.get('description');\r\n      const beneficiary = formData.get('beneficiary');\r\n      const goal = formData.get('goal');\r\n      const duration = formData.get('duration');\r\n\r\n      // Validate inputs\r\n      if (!ethers.utils.isAddress(beneficiary)) {\r\n        throw new Error('Invalid beneficiary address');\r\n      }\r\n\r\n      if (isNaN(goal) || parseFloat(goal) <= 0) {\r\n        throw new Error('Goal amount must be greater than 0');\r\n      }\r\n\r\n      if (isNaN(duration) || parseInt(duration) <= 0) {\r\n        throw new Error('Duration must be greater than 0');\r\n      }\r\n\r\n      // Check if contract is properly connected\r\n      if (!contract) {\r\n        throw new Error('Contract not connected. Please refresh the page.');\r\n      }\r\n\r\n      console.log('Creating campaign with:', {\r\n        title,\r\n        description,\r\n        beneficiary,\r\n        goal: ethers.utils.parseEther(goal),\r\n        duration: parseInt(duration)\r\n      });\r\n\r\n      const tx = await contract.createCampaign(\r\n        title,\r\n        description,\r\n        beneficiary,\r\n        ethers.utils.parseEther(goal),\r\n        parseInt(duration)\r\n      );\r\n      \r\n      setTxStatus('Waiting for transaction confirmation...');\r\n      const receipt = await tx.wait();\r\n      console.log('Transaction receipt:', receipt);\r\n      \r\n      setTxStatus('Campaign created successfully!');\r\n      await loadCampaigns(contract);\r\n      event.target.reset();\r\n    } catch (error) {\r\n      console.error(\"Error creating campaign:\", error);\r\n      let errorMessage = \"Failed to create campaign. \";\r\n      \r\n      if (error.code === 'INSUFFICIENT_FUNDS') {\r\n        errorMessage += \"You don't have enough ETH to cover the gas fees.\";\r\n      } else if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {\r\n        errorMessage += \"Gas estimation failed. Please try again.\";\r\n      } else if (error.message) {\r\n        errorMessage += error.message;\r\n      }\r\n      \r\n      setError(errorMessage);\r\n      setTxStatus('');\r\n    }\r\n  };\r\n\r\n  const donate = async (campaignId, amount) => {\r\n    try {\r\n      const tx = await contract.donate(campaignId, {\r\n        value: ethers.utils.parseEther(amount)\r\n      });\r\n      await tx.wait();\r\n      await loadCampaigns(contract);\r\n    } catch (error) {\r\n      console.error(\"Error making donation:\", error);\r\n      setError(\"Failed to make donation. Please try again.\");\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Blockchain Charity Platform</h1>\r\n        <p>Connected Account: {account || 'Not Connected'}</p>\r\n        {error && <p className=\"error\">{error}</p>}\r\n        {txStatus && <p className=\"status\">{txStatus}</p>}\r\n      </header>\r\n\r\n      <section>\r\n        <h2>Create New Campaign</h2>\r\n        <form onSubmit={createCampaign}>\r\n          <input type=\"text\" name=\"title\" placeholder=\"Campaign Title\" required />\r\n          <textarea name=\"description\" placeholder=\"Campaign Description\" required />\r\n          <input type=\"text\" name=\"beneficiary\" placeholder=\"Beneficiary Address\" required />\r\n          <input type=\"number\" name=\"goal\" placeholder=\"Goal Amount (ETH)\" step=\"0.01\" min=\"0.01\" required />\r\n          <input type=\"number\" name=\"duration\" placeholder=\"Duration (days)\" min=\"1\" required />\r\n          <button type=\"submit\">Create Campaign</button>\r\n        </form>\r\n      </section>\r\n\r\n      <section>\r\n        <h2>Active Campaigns</h2>\r\n        <div className=\"campaigns-grid\">\r\n          {campaigns.length === 0 ? (\r\n            <p>No campaigns found. Create one to get started!</p>\r\n          ) : (\r\n            campaigns.map((campaign) => (\r\n              <div key={campaign.id} className=\"campaign-card\">\r\n                <h3>{campaign.title}</h3>\r\n                <p>{campaign.description}</p>\r\n                <p>Goal: {campaign.goal} ETH</p>\r\n                <p>Raised: {campaign.raised} ETH</p>\r\n                <p>Deadline: {campaign.deadline}</p>\r\n                <p>Status: {campaign.active ? 'Active' : 'Completed'}</p>\r\n                {campaign.active && (\r\n                  <div>\r\n                    <input \r\n                      type=\"number\" \r\n                      placeholder=\"Amount (ETH)\" \r\n                      id={`donation-${campaign.id}`}\r\n                      step=\"0.01\"\r\n                      min=\"0.01\"\r\n                    />\r\n                    <button onClick={() => donate(campaign.id, document.getElementById(`donation-${campaign.id}`).value)}>\r\n                      Donate\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}